#version 120


// Input vertex data, different for all executions of this shader.
//attribute vec3 vertexPosition_modelspace; //original
//
//void main(){
//
//	//gl_Position = vec4(vertexPosition_modelspace, 1.0);//original
//	gl_Position.xyz = vertexPosition_modelspace;//example
//	gl_Position.w = 2.0;//example: w is a point, where as x y z are vectors.
//						//Bigger w means the triangle is smaller (further away?) and the inverse
//
//}

//mine added -v

// Input vertex data, different for all executions of this shader.
attribute vec3 vertexPosition_modelspace;
attribute vec3 vertexColor;
attribute vec2 vertexUV;

// Output data ; will be interpolated for each fragment.
varying vec3 fragmentColor;
varying vec2 UV;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;

void main(){	

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	// The color of each vertex will be interpolated
	// to produce the color of each fragment
	fragmentColor = vertexColor;

	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}